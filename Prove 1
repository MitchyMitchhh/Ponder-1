import sklearn
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB


class HardCodedClassifier:
    def fit(self, data, target):
        h = HardCodedModel()
        return h


class HardCodedModel:
    def predict(self, data):
        array = []
        for i in range(45):
            array.append(0)
        #i = 0
        #while i in len(data):
        #   array.append(0)
        #    i += 1
        return array

iris = datasets.load_iris()

# Show the data (the attributes of each instance)
#print(iris.data)

# Show the target values (in numeric format) of each instance
#print(iris.target)

# Show the actual target names that correspond to each number
#print(iris.target_names)

X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.3)
classifier = GaussianNB()
model = classifier.fit(X_train, y_train)
targets_predicted = model.predict(X_test)

#print(targets_predicted)

print('GaussianNB algorithm: ', sklearn.metrics.accuracy_score(y_test, targets_predicted), '%', sep='')

classifier = HardCodedClassifier()
model = classifier.fit(X_train, y_train)
targets_predicted = model.predict(X_test)

print('Hard Coded algorithm: ', sklearn.metrics.accuracy_score(y_test, targets_predicted), '%', sep='')